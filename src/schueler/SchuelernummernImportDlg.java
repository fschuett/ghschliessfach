/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SchuelerImportDlg.java
 *
 * Created on 02.09.2011, 10:34:18
 */
package schueler;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.persistence.EntityManager;
import javax.persistence.NoResultException;
import javax.persistence.Query;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

import org.jdesktop.application.Action;
import org.jdesktop.application.Application;
import org.jdesktop.application.ResourceMap;
import org.jdesktop.application.Task;
import org.jdesktop.application.TaskEvent;
import org.jdesktop.application.TaskListener;

import schliessfach.Konstanten;
import schliessfach.SchliessfachApp;
import schliessfach.SchliessfachView;

/**
 * 
 * @author fschuett
 */
public class SchuelernummernImportDlg extends javax.swing.JDialog {

	/**
	 * 
	 */
	private static final long serialVersionUID = 6198246740003651334L;
	private EntityManager em;
	private boolean testDurchgefuehrt;
	private Map<Long, Schueler> schuelerMap;
	private Vector<Long> bearbeitet;
	private boolean importInArbeit;
	private ResourceMap resourceMap;

	/** Creates new form SchuelerImportDlg */
	public SchuelernummernImportDlg(java.awt.Frame parent) {
		super(parent, true);
		em = SchliessfachApp.getApplication().em;
		testDurchgefuehrt = false;
		Query q = em
				.createQuery("SELECT s.nr,s FROM Schueler s ORDER BY s.nr ASC");
		schuelerMap = new HashMap<Long, Schueler>();
		for (Object[] o : (List<Object[]>) q.getResultList()) {
			schuelerMap.put((Long) o[0], (Schueler) o[1]);
		}
		bearbeitet = new Vector<Long>(schuelerMap.size());
		importInArbeit = false;
		initComponents();
	}

    public String getNummernImportPfad(){
    	if(em == null)
    		return null;
    	Query q = em.createQuery("SELECT k FROM Konstanten k WHERE k.kennung='NUMMERNIMPORTPATH'");
    	try {
    		Konstanten k = (Konstanten)q.getSingleResult();
        	if(k != null)
        		return k.getInhalt();
        	else
        		return null;
    	} catch (NoResultException e) {
    		return null;
    	}
    }
    
    public boolean setNummernImportPfad(String path){
    	if(em == null)
    		return false;
    	if(path == null || "".equals(path))
    		return false;
    	Query q = em.createQuery("SELECT k FROM Konstanten k WHERE k.kennung='NUMMERNIMPORTPATH'");
    	try {
    		Konstanten k = (Konstanten)q.getSingleResult();
      		k.setInhalt(path);
      		return true;
    	} catch (NoResultException e) {
        	Konstanten k = new Konstanten("NUMMERNIMPORTPATH", path);
        	em.getTransaction().begin();
        	em.persist(k);
        	em.getTransaction().commit();
        	return true;
    	}
    }
    
	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed"
	// desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		jPanel1 = new javax.swing.JPanel();
		dateiName = new javax.swing.JTextField();
		waehle = new javax.swing.JButton();
		jPanel2 = new javax.swing.JPanel();
		importiere = new javax.swing.JButton();
		jbSchliessen = new javax.swing.JButton();
		jbHilfe = new javax.swing.JButton();
		jPanel3 = new javax.swing.JPanel();
		jScrollPane1 = new javax.swing.JScrollPane();
		protokoll = new javax.swing.JTextArea();
		jPanel4 = new javax.swing.JPanel();
		cbTestLauf = new javax.swing.JCheckBox();

		setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
		resourceMap = org.jdesktop.application.Application
				.getInstance(schliessfach.SchliessfachApp.class).getContext()
				.getResourceMap(SchuelernummernImportDlg.class);
		setTitle(resourceMap.getString("Form.title")); // NOI18N
		setName("Form"); // NOI18N
		addWindowListener(new java.awt.event.WindowAdapter() {
			public void windowClosing(java.awt.event.WindowEvent evt) {
				formWindowClosing(evt);
			}
		});

		jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null,
				resourceMap.getString("jPanel1.border.title"),
				javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION,
				javax.swing.border.TitledBorder.DEFAULT_POSITION,
				resourceMap.getFont("jPanel1.border.titleFont"))); // NOI18N
		jPanel1.setName("jPanel1"); // NOI18N

		dateiName.setText(resourceMap.getString("dateiName.text")); // NOI18N
		dateiName.setName("dateiName"); // NOI18N

		waehle.setFont(resourceMap.getFont("waehle.font")); // NOI18N
		waehle.setText("Durchsuchen..."); // NOI18N
		waehle.setName("waehle"); // NOI18N
		waehle.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				waehleActionPerformed(evt);
			}
		});

		javax.swing.GroupLayout gl_jPanel1 = new javax.swing.GroupLayout(
				jPanel1);
		jPanel1.setLayout(gl_jPanel1);
		gl_jPanel1.setHorizontalGroup(gl_jPanel1.createParallelGroup(
				javax.swing.GroupLayout.Alignment.LEADING).addGroup(
				javax.swing.GroupLayout.Alignment.TRAILING,
				gl_jPanel1
						.createSequentialGroup()
						.addContainerGap()
						.addComponent(dateiName,
								javax.swing.GroupLayout.DEFAULT_SIZE, 416,
								Short.MAX_VALUE)
						.addGap(18, 18, 18)
						.addComponent(waehle,
								javax.swing.GroupLayout.PREFERRED_SIZE, 120,
								javax.swing.GroupLayout.PREFERRED_SIZE)
						.addContainerGap()));
		gl_jPanel1
				.setVerticalGroup(gl_jPanel1
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								gl_jPanel1
										.createSequentialGroup()
										.addGroup(
												gl_jPanel1
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.BASELINE)
														.addComponent(
																dateiName,
																javax.swing.GroupLayout.PREFERRED_SIZE,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																javax.swing.GroupLayout.PREFERRED_SIZE)
														.addComponent(waehle))
										.addContainerGap(
												javax.swing.GroupLayout.DEFAULT_SIZE,
												Short.MAX_VALUE)));

		jPanel2.setName("jPanel2"); // NOI18N

		importiere.setFont(resourceMap.getFont("importiere.font")); // NOI18N
		importiere.setText(resourceMap.getString("importiere.text")); // NOI18N
		importiere.setName("importiere"); // NOI18N
		importiere.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				importiereActionPerformed(evt);
			}
		});

		jbSchliessen.setFont(resourceMap.getFont("jbSchliessen.font")); // NOI18N
		jbSchliessen.setText("Schlie√üen"); // NOI18N
		jbSchliessen.setName("jbSchliessen"); // NOI18N
		jbSchliessen.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jbSchliessenActionPerformed(evt);
			}
		});

		jbHilfe.setFont(resourceMap.getFont("jbSchliessen.font"));
		jbHilfe.setText("Hilfe");
		jbHilfe.setName("jbHilfe");
		jbHilfe.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jbHilfeActionPerformed(evt);
			}
		});
		javax.swing.GroupLayout gl_jPanel2 = new javax.swing.GroupLayout(
				jPanel2);
		gl_jPanel2.setHorizontalGroup(gl_jPanel2.createParallelGroup(
				Alignment.TRAILING).addGroup(
				gl_jPanel2
						.createSequentialGroup()
						.addContainerGap(265, Short.MAX_VALUE)
						.addComponent(jbHilfe, GroupLayout.PREFERRED_SIZE, 84,
								GroupLayout.PREFERRED_SIZE).addGap(18)
						.addComponent(importiere).addGap(18)
						.addComponent(jbSchliessen).addGap(16)));
		gl_jPanel2.setVerticalGroup(gl_jPanel2.createParallelGroup(
				Alignment.TRAILING)
				.addGroup(
						gl_jPanel2
								.createSequentialGroup()
								.addContainerGap(GroupLayout.DEFAULT_SIZE,
										Short.MAX_VALUE)
								.addGroup(
										gl_jPanel2
												.createParallelGroup(
														Alignment.BASELINE)
												.addComponent(importiere)
												.addComponent(jbSchliessen)
												.addComponent(jbHilfe))
								.addContainerGap()));
		jPanel2.setLayout(gl_jPanel2);

		jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null,
				resourceMap.getString("jPanel3.border.title"),
				javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION,
				javax.swing.border.TitledBorder.DEFAULT_POSITION,
				resourceMap.getFont("jPanel3.border.titleFont"))); // NOI18N
		jPanel3.setName("jPanel3"); // NOI18N

		jScrollPane1
				.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
		jScrollPane1.setName("jScrollPane1"); // NOI18N

		protokoll.setColumns(20);
		protokoll.setRows(5);
		protokoll.setName("protokoll"); // NOI18N
		jScrollPane1.setViewportView(protokoll);

		javax.swing.GroupLayout gl_jPanel3 = new javax.swing.GroupLayout(
				jPanel3);
		jPanel3.setLayout(gl_jPanel3);
		gl_jPanel3.setHorizontalGroup(gl_jPanel3.createParallelGroup(
				javax.swing.GroupLayout.Alignment.LEADING).addGroup(
				gl_jPanel3
						.createSequentialGroup()
						.addContainerGap()
						.addComponent(jScrollPane1,
								javax.swing.GroupLayout.DEFAULT_SIZE, 554,
								Short.MAX_VALUE).addContainerGap()));
		gl_jPanel3.setVerticalGroup(gl_jPanel3.createParallelGroup(
				javax.swing.GroupLayout.Alignment.LEADING).addGroup(
				gl_jPanel3
						.createSequentialGroup()
						.addComponent(jScrollPane1,
								javax.swing.GroupLayout.DEFAULT_SIZE, 275,
								Short.MAX_VALUE).addContainerGap()));

		jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(null,
				"Durchf√ºhrung",
				javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION,
				javax.swing.border.TitledBorder.DEFAULT_POSITION,
				resourceMap.getFont("jPanel4.border.titleFont"))); // NOI18N
		jPanel4.setName("jPanel4"); // NOI18N

		cbTestLauf.setForeground(resourceMap.getColor("cbTestLauf.foreground")); // NOI18N
		cbTestLauf.setSelected(true);
		cbTestLauf
				.setText("Testlauf: Es werden keine √Ñnderungen durchgef√ºhrt."); // NOI18N
		cbTestLauf.setName("cbTestLauf"); // NOI18N

		javax.swing.GroupLayout gl_jPanel4 = new javax.swing.GroupLayout(
				jPanel4);
		jPanel4.setLayout(gl_jPanel4);
		gl_jPanel4.setHorizontalGroup(gl_jPanel4.createParallelGroup(
				javax.swing.GroupLayout.Alignment.LEADING).addGroup(
				javax.swing.GroupLayout.Alignment.TRAILING,
				gl_jPanel4
						.createSequentialGroup()
						.addContainerGap()
						.addComponent(cbTestLauf,
								javax.swing.GroupLayout.DEFAULT_SIZE, 562,
								Short.MAX_VALUE).addContainerGap()));
		gl_jPanel4.setVerticalGroup(gl_jPanel4.createParallelGroup(
				javax.swing.GroupLayout.Alignment.LEADING).addGroup(
				gl_jPanel4
						.createSequentialGroup()
						.addContainerGap()
						.addComponent(cbTestLauf)
						.addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE,
								Short.MAX_VALUE)));

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(
				getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(layout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(
						layout.createSequentialGroup()
								.addContainerGap()
								.addGroup(
										layout.createParallelGroup(
												javax.swing.GroupLayout.Alignment.LEADING)
												.addComponent(
														jPanel2,
														javax.swing.GroupLayout.Alignment.TRAILING,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														Short.MAX_VALUE)
												.addComponent(
														jPanel4,
														javax.swing.GroupLayout.Alignment.TRAILING,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														Short.MAX_VALUE)
												.addComponent(
														jPanel3,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														Short.MAX_VALUE)
												.addComponent(
														jPanel1,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														Short.MAX_VALUE))
								.addContainerGap()));
		layout.setVerticalGroup(layout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(
						layout.createSequentialGroup()
								.addContainerGap()
								.addComponent(jPanel1,
										javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE,
										javax.swing.GroupLayout.PREFERRED_SIZE)
								.addPreferredGap(
										javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addComponent(jPanel3,
										javax.swing.GroupLayout.DEFAULT_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE,
										Short.MAX_VALUE)
								.addGap(18, 18, 18)
								.addComponent(jPanel4,
										javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE,
										javax.swing.GroupLayout.PREFERRED_SIZE)
								.addPreferredGap(
										javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addComponent(jPanel2,
										javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE,
										javax.swing.GroupLayout.PREFERRED_SIZE)
								.addContainerGap()));

		pack();
	}// </editor-fold>//GEN-END:initComponents

	private void waehleActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_waehleActionPerformed
		JFileChooser importDatei = new JFileChooser();
		importDatei.setFileFilter(new FileNameExtensionFilter("SDF-Dateien",
				"sdf"));
		String dirname = getNummernImportPfad();
		if (dirname != null && !"".equals(dirname)) {
			importDatei.setCurrentDirectory(new File(dirname));
		}
		if (importDatei.showOpenDialog(SchliessfachApp.getApplication()
				.getMainFrame()) == JFileChooser.APPROVE_OPTION) {
			File f = importDatei.getSelectedFile();
			if (!f.exists() || !f.canRead()) {
				JOptionPane
						.showMessageDialog(
								SchliessfachApp.getApplication().getMainFrame(),
								"Die Datei existiert nicht oder kann nicht gelesen werden.",
								"√ñffnen", JOptionPane.INFORMATION_MESSAGE);
				return;
			}
			setNummernImportPfad(importDatei.getCurrentDirectory()
					.getAbsolutePath());
			dateiName.setText(f.getAbsolutePath());
		}
	}// GEN-LAST:event_waehleActionPerformed

	private void importiereActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_importiereActionPerformed
		Task importLauf = new ImportTask(SchliessfachApp.getApplication());
		importLauf.addTaskListener(new TaskListener() {

			@Override
			public void doInBackground(TaskEvent event) {
				return;
			}

			@Override
			public void process(TaskEvent event) {
				return;
			}

			@Override
			public void succeeded(TaskEvent event) {
				// man darf nicht zweimal importieren!
				if (cbTestLauf.isSelected())
					importiere.setEnabled(true);
				jbSchliessen.setEnabled(true);
			}

			@Override
			public void failed(TaskEvent event) {
				importiere.setEnabled(true);
				jbSchliessen.setEnabled(true);
			}

			@Override
			public void cancelled(TaskEvent event) {
				importiere.setEnabled(true);
				jbSchliessen.setEnabled(true);
			}

			@Override
			public void interrupted(TaskEvent event) {
				return;
			}

			@Override
			public void finished(TaskEvent event) {
				// man darf nicht zweimal importieren!
				if (cbTestLauf.isSelected())
					importiere.setEnabled(true);
				jbSchliessen.setEnabled(true);
			}
		});
		SchliessfachApp.getApplication().getContext().getTaskService()
				.execute(importLauf);
		SchliessfachApp.getApplication().getContext().getTaskMonitor()
				.setForegroundTask(importLauf);
		importiere.setEnabled(false);
		jbSchliessen.setEnabled(false);
	}// GEN-LAST:event_importiereActionPerformed

	private void formWindowClosing(java.awt.event.WindowEvent evt) {// GEN-FIRST:event_formWindowClosing
		if (!jbSchliessen.isEnabled())
			return;
		dispose();
	}// GEN-LAST:event_formWindowClosing

	private void jbSchliessenActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jbSchliessenActionPerformed
		dispose();
	}// GEN-LAST:event_jbSchliessenActionPerformed

	private void jbHilfeActionPerformed(java.awt.event.ActionEvent evt) {
		javax.swing.JOptionPane.showMessageDialog(this,
				resourceMap.getString("jbHilfe.text"));
	}

	/**
	 * @param args
	 *            the command line arguments
	 */
	public static void main(String args[]) {
		java.awt.EventQueue.invokeLater(new Runnable() {

			public void run() {
				SchuelernummernImportDlg dialog = new SchuelernummernImportDlg(
						new javax.swing.JFrame());
				dialog.addWindowListener(new java.awt.event.WindowAdapter() {

					public void windowClosing(java.awt.event.WindowEvent e) {
						System.exit(0);
					}
				});
				dialog.setVisible(true);
			}
		});
	}

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JCheckBox cbTestLauf;
	private javax.swing.JTextField dateiName;
	private javax.swing.JButton importiere;
	private javax.swing.JPanel jPanel1;
	private javax.swing.JPanel jPanel2;
	private javax.swing.JPanel jPanel3;
	private javax.swing.JPanel jPanel4;
	private javax.swing.JScrollPane jScrollPane1;
	private javax.swing.JButton jbSchliessen;
	private javax.swing.JButton jbHilfe;
	private javax.swing.JTextArea protokoll;
	private javax.swing.JButton waehle;

	// End of variables declaration//GEN-END:variables

	private void protokollAddLine(String text) {
		protokoll.setText(protokoll.getText() + text + "\n");
	}

	@Action
	public void schliessen() {
		dispose();
	}

	private void importieren() {
		protokoll.setText("");
		File imf = new File(dateiName.getText());
		Vector<Long> neu = new Vector<Long>();
		Vector<Long> entfernt = new Vector<Long>();
		Map<Long, Long> geaendert = new HashMap<Long, Long>();
		try {
			// Importdatei einlesen
			protokoll.append(">>>> Die Importdatei " + dateiName.getText()
					+ " wird eingelesen <<<<\n");
			BufferedReader leseImF = new BufferedReader(new InputStreamReader(
					new FileInputStream(imf)));
			Vector<Long> importNr = new Vector<Long>();
			int zeile = 0;
			String s;
			Long nr = -1L;
			int index;
			// Dateiformat:
			// "√úBERSCHRIFTEN..."
			// "<NUMMER_ALT>";"<NUMMER_NEU>"
			// in jeder g√ºltigen Zeile
			leseImF.readLine();
			while ((s = leseImF.readLine()) != null) {
				zeile++;
				String[] feld = s.split(";");
				if (feld == null || feld.length != 2) {
					continue;
				}
				try {
					// SIPROG generiert Sch√ºlernummern aus einer zweistelligen
					// Jahrgangs- und einer maximal
					// 4stelligen laufenden Nummer, die auch k√ºrzer sein kann.
					if (feld[0].length() < 6)
						feld[0] = feld[0].substring(0, 2)
								+ String.format("%04d",
										Integer.parseInt(feld[0].substring(2)));
					nr = Long.parseLong(feld[0]);
					if (schuelerMap.containsKey(nr)) {
						geaendert.put(nr, Long.parseLong(feld[1]));
					} else {
						neu.add(Long.parseLong(feld[1]));
					}
					importNr.add(nr);
				} catch (NumberFormatException ex) {
					protokoll.append("Zeile(" + zeile
							+ "): Ung√ºltiger Datensatz -- wird ignoriert.\n");
				} catch (ArrayIndexOutOfBoundsException ex) {
					protokoll.append("Zeile(" + zeile
							+ "): Ung√ºltiger Datensatz -- wird ignoriert.\n");
				}
			}
			for (Long id : schuelerMap.keySet()) {
				if (!importNr.contains(id)
						&& schuelerMap.get(id).getStatus() != SchuelerStatus.INAKTIV) {
					entfernt.add(id);
				}
			}
			protokoll.append(geaendert.size()
					+ " Sch√ºlernummern werden ge√§ndert.\n");
			protokoll.append(neu.size() + " Sch√ºlernummern sind neu.\n");
			for (Long l : neu)
				protokoll.append("    +++ " + l + "\n");
			protokoll.append(entfernt.size()
					+ " Sch√ºlernummern werden nicht ge√§ndert.\n");
			for (Long l : entfernt) {
				Schueler s1 = schuelerMap.get(l);
				protokoll.append("    --- " + s1 + "\n");
			}
			protokoll.append(">>>> Es wurden " + zeile
					+ " Zeilen aus der Importdatei eingelesen. <<<<\n");
		} catch (FileNotFoundException ex) {
			Logger.getLogger(SchuelernummernImportDlg.class.getName()).log(
					Level.SEVERE, null, ex);
			protokollAddLine("Die Import-Datei " + dateiName.getText()
					+ " kann nicht gelesen werden! -- Abbruch\n");
			return;
		} catch (IOException ex) {
			Logger.getLogger(SchuelernummernImportDlg.class.getName()).log(
					Level.SEVERE, null, ex);
			protokollAddLine("Die Import-Datei " + dateiName.getText()
					+ " kann nicht gelesen werden! -- Abbruch\n");
		}
		if (cbTestLauf.isSelected()) {
			protokoll
					.append(">>>> Testlauf: Es wurden keine √Ñnderungen durchgef√ºhrt. <<<<");
			return;
		}
		// Durchf√ºhrung der √Ñnderungen
		// √Ñnderungen
		protokoll.append(">>>> Es werden Sch√ºlerdaten ge√§ndert: <<<<\n");
		em.getTransaction().begin();
		Iterator<Long> aendern = geaendert.keySet().iterator();
		while (aendern.hasNext()) {
			Long nr = aendern.next();
			Schueler s1 = schuelerMap.get(nr);
			s1.setNr(geaendert.get(nr));
			protokoll.append(nr + " -> " + s1.getNr());
			protokoll.append("\n");
		}
		em.getTransaction().commit();

		protokoll
				.append(">>>> -------------------------------------------------- <<<<\n");
	}

	private class ImportTask extends Task {

		public ImportTask(Application application) {
			super(application);
			this.setTitle("Sch√ºlerdaten werden importiert...");
			this.setUserCanCancel(false);
		}

		@Override
		protected Object doInBackground() throws Exception {
			importieren();
			((SchliessfachView) SchliessfachApp.getApplication().getMainView())
					.aktualisiereKlassenliste();
			return null;
		}
	}
}
