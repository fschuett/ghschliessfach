/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SchliessfachAuswahlDlg.java
 *
 * Created on 14.09.2011, 13:28:08
 */
package schliessfach.dialoge;

import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import javax.persistence.EntityManager;
import javax.persistence.Query;
import javax.swing.GroupLayout;
import javax.swing.JTree;
import javax.swing.tree.DefaultMutableTreeNode;
import schliessfach.Schliessfach;
import schliessfach.SchliessfachApp;
import schliessfach.Schliessfachschrank;
import vertrag.Vertrag;

/**
 *
 * @author fschuett
 */
public class SchliessfachAuswahlDlg extends javax.swing.JDialog {

    private EntityManager em;
    private Vertrag vertrag;
    private static final String schraenkeQueryString = "SELECT new schliessfach.Schliessfachschrank(s.schrankId,MIN(s.nr),COUNT(s),MIN(s.ort)) FROM Schliessfach s GROUP BY s.schrankId";
    private Map<Long,Schliessfachschrank> schraenke;

    /** Creates new form SchliessfachAuswahlDlg */
    public SchliessfachAuswahlDlg(java.awt.Frame parent, Vertrag vertrag) {
        super(parent, true);
        this.em = SchliessfachApp.getApplication().em;
        this.vertrag = vertrag;
        Query q = em.createQuery(schraenkeQueryString);
        List<Schliessfachschrank> schraenkeListe = q.getResultList();
        schraenke = new HashMap<Long,Schliessfachschrank>();
        for(Schliessfachschrank sfs : schraenkeListe)
            schraenke.put(sfs.getId(),sfs);
        initComponents();
    }

    private class Node {
        protected Schliessfach s;
        protected int anzahl;

        public Node(Schliessfach s){
            this.s = s;
        }

        @Override
        public String toString(){
            return s.toString();
        }
    }

    private class OrtNode extends Node {
        public OrtNode(Schliessfach s){
            super(s);
        }

        @Override
        public String toString(){
            return s.getOrt()+" ab "+s.getNr().toString()+"("+anzahl+")";
        }

    }

    private class SchrankNode extends Node {
        public SchrankNode(Schliessfach s){
            super(s);
        }

        @Override
        public String toString(){
            return "ab "+s.getNr().toString()+"("+anzahl+")";
        }
    }

    private class FachNode extends Node {
        public FachNode(Schliessfach s){
            super(s);
        }

        @Override
        public String toString(){
            return s.getNr().toString()+(s.getKommentar()!=null?"("+s.getKommentar()+")":"");
        }
    }

    private DefaultMutableTreeNode erzeugeBaum() {
        Query q = em.createQuery("SELECT DISTINCT s FROM Schliessfach s WHERE NOT EXISTS (SELECT v FROM Vertrag v WHERE v.schliessfach.nr=s.nr) ORDER BY s.ort ASC,s.schrankId ASC,s.nr ASC");
        List<Schliessfach> freieFaecher = q.getResultList();
        DefaultMutableTreeNode wurzel = new DefaultMutableTreeNode("Schließfächer(freie)");
        Schliessfach aktuell, alt;
        DefaultMutableTreeNode ortNode, schrankNode;
        Iterator<Schliessfach> it = freieFaecher.listIterator();
        if (it.hasNext()) {
            aktuell = it.next();
            ortNode = new DefaultMutableTreeNode(new OrtNode(aktuell));
            wurzel.add(ortNode);
            schrankNode = new DefaultMutableTreeNode(new SchrankNode(aktuell));
            ortNode.add(schrankNode);
            schrankNode.add(new DefaultMutableTreeNode(new FachNode(aktuell)));
            ((OrtNode)ortNode.getUserObject()).anzahl++;
            ((SchrankNode)schrankNode.getUserObject()).anzahl++;
            while (it.hasNext()) {
                alt = aktuell;
                aktuell = it.next();
                if(!alt.getOrt().equals(aktuell.getOrt())){
                    ortNode = new DefaultMutableTreeNode(new OrtNode(aktuell));
                    wurzel.add(ortNode);
                }
                if(!alt.getSchrankId().equals(aktuell.getSchrankId())){
                    schrankNode = new DefaultMutableTreeNode(new SchrankNode(aktuell));
                    ortNode.add(schrankNode);
                }
                schrankNode.add(new DefaultMutableTreeNode(new FachNode(aktuell)));
                ((OrtNode)ortNode.getUserObject()).anzahl++;
                ((SchrankNode)schrankNode.getUserObject()).anzahl++;
            }
        }
        return wurzel;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        schliessfaecher = new javax.swing.JTree(erzeugeBaum());
        aktuellerSchrank = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jbAbbrechen = new javax.swing.JButton();
        jbAuswahl = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Schließfach auswählen");

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane1.setName("jScrollPane1"); // NOI18N

        schliessfaecher.setName("schliessfaecher"); // NOI18N
        schliessfaecher.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                schliessfaecherValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(schliessfaecher);

        aktuellerSchrank.setMaximumSize(new java.awt.Dimension(454, 288));
        aktuellerSchrank.setMinimumSize(new java.awt.Dimension(454, 288));
        aktuellerSchrank.setName("aktuellerSchrank"); // NOI18N
        aktuellerSchrank.setPreferredSize(new java.awt.Dimension(454, 288));

        jLabel1.setForeground(new java.awt.Color(102, 102, 102));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("kein Schrank gewählt");
        jLabel1.setName("jLabel1"); // NOI18N

        javax.swing.GroupLayout aktuellerSchrankLayout = new javax.swing.GroupLayout(aktuellerSchrank);
        aktuellerSchrank.setLayout(aktuellerSchrankLayout);
        aktuellerSchrankLayout.setHorizontalGroup(
            aktuellerSchrankLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, aktuellerSchrankLayout.createSequentialGroup()
                .addGap(156, 156, 156)
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                .addGap(200, 200, 200))
        );
        aktuellerSchrankLayout.setVerticalGroup(
            aktuellerSchrankLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(aktuellerSchrankLayout.createSequentialGroup()
                .addGap(109, 109, 109)
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 45, Short.MAX_VALUE)
                .addGap(134, 134, 134))
        );

        jbAbbrechen.setText("Abbrechen"); // NOI18N
        jbAbbrechen.setName("jbAbbrechen"); // NOI18N
        jbAbbrechen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAbbrechenActionPerformed(evt);
            }
        });

        jbAuswahl.setText("Auswahl übernehmen");
        jbAuswahl.setName("jbAuswahl"); // NOI18N
        jbAuswahl.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAuswahlActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(aktuellerSchrank, javax.swing.GroupLayout.DEFAULT_SIZE, 497, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jbAuswahl)
                        .addGap(18, 18, 18)
                        .addComponent(jbAbbrechen)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 334, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(aktuellerSchrank, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jbAbbrechen)
                            .addComponent(jbAuswahl))))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void schliessfaecherValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_schliessfaecherValueChanged
        DefaultMutableTreeNode node = (DefaultMutableTreeNode) ((JTree)evt.getSource()).getLastSelectedPathComponent();
        if(node == null || !(node.getUserObject() instanceof Node))
            return;
        Node inhalt = (Node) node.getUserObject();
        Schliessfachschrank sf = schraenke.get(inhalt.s.getSchrankId());
        if(!(aktuellerSchrank instanceof SchliessfachschrankPanel)){
            SchliessfachschrankPanel neu = new SchliessfachschrankPanel(sf);
            ((GroupLayout)getContentPane().getLayout()).replace(aktuellerSchrank, neu);
            aktuellerSchrank = neu;
        } else {
            SchliessfachschrankPanel sfp = (SchliessfachschrankPanel) aktuellerSchrank;
            sfp.setSchrank(sf);
            if(inhalt instanceof FachNode)
                sfp.setGewaehltesFach(inhalt.s.getNr());
        }
    }//GEN-LAST:event_schliessfaecherValueChanged

    private void jbAbbrechenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAbbrechenActionPerformed
        dispose();
    }//GEN-LAST:event_jbAbbrechenActionPerformed

    private void jbAuswahlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAuswahlActionPerformed
        if(vertrag != null){
            Long fach = ((SchliessfachschrankPanel)aktuellerSchrank).getGewaehltesFach();
            if(fach != -1L){
                Query q = em.createQuery("SELECT s FROM Schliessfach s WHERE s.nr="+fach);
                Schliessfach s = (Schliessfach) q.getSingleResult();
                if(s != null){
                    vertrag.setSchliessfach(s);
                    s.setVertrag(vertrag);
                }
            }
        }
        dispose();
    }//GEN-LAST:event_jbAuswahlActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                SchliessfachAuswahlDlg dialog = new SchliessfachAuswahlDlg(new javax.swing.JFrame(), new Vertrag());
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel aktuellerSchrank;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbAbbrechen;
    private javax.swing.JButton jbAuswahl;
    private javax.swing.JTree schliessfaecher;
    // End of variables declaration//GEN-END:variables
}
